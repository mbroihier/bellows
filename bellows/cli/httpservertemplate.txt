#!/usr/bin/env -S python
'''
HTTP server and gateway client - services HTTP GETs and issues commands to the Bellows Plus gateway
'''
import asyncio
from http import server as httpServer
import json
import logging
import requests
import signal
import socket
import threading
import time
import sys
import websockets
import click
import click_log
from bellows.cli import opts
from bellows.cli import util
from websockets.sync.client import connect

LOGGER = logging.getLogger(__name__)
continueLoop = True
def sigint_handler(signal, frame):
    global continueLoop
    LOGGER.warning("\nshutting down server....")
    continueLoop = False

class HTTPHandler(httpServer.BaseHTTPRequestHandler):
    '''
    HTTPHandler that handles GET requests of HTTP protocol - POSTs are ignored
    '''
    def do_GET(self):
        print("got a get with:", self.path)
        if self.path == '/':
            self.send_response(301)
            self.send_header('Location', '/index.html')
            self.end_headers()
        elif self.path == '/index.html':
            with open('./index.html', 'r') as fileObject:
                content = ""
                for line in fileObject:
                    content += line
                content = content.encode('utf-8')
                self.send_response(200)
                self.send_header('Content-Type', 'text')
                self.send_header('Content-Length', len(content))
                self.end_headers()
                self.wfile.write(content)
        elif self.path[-3:] == 'on?' or self.path[-4:] == 'off?' or self.path[-2:] == 'on' or self.path[-3:] == 'off':
            command = self.path.replace('/', '').replace('?', '')
            try:
                with connect("ws://localhost:8126") as conn:
                    conn.send("http server internal connection request")
                    conn.socket.settimeout(5.0)
                    message = conn.recv()
                    LOGGER.info(f"received initial/connection status of: {message}")
                    device = command.split('o')[0]
                    LOGGER.info(f"device: {device}, command: {command}")
                    if json.loads(message)[device] in command:
                        LOGGER.warning(f"{json.loads(message)[device]} matches commanded state")
                    else:
                        conn.send(command)
                        message = conn.recv()
                        LOGGER.info(f"received final status of: {message}")
            except socket.timeout as e:
                LOGGER.error("TimeoutError while receiving status, terminating")
            except Exception as e:
                LOGGER.error(f"Unexpected Exception detected {e}")
            self.send_response(302)
            self.send_header('Location', '/index.html')
            self.end_headers()
        else:
            self.send_error(404)
            self.end_headers()

    def do_POST(self):
        length = int(self.headers['Content-Length'])
        line = self.rfile.read(length)
        print("got a post with:", line)

class HTTPServerBackground():
    def __init__(self, server):
        self.terminate = False
        self.server = server
    
    def background(self):
        while not self.terminate:
            self.server.handle_request()

    def shutdown(self):
        self.terminate = True
        
@click.command()
@click_log.simple_verbosity_option(logging.getLogger(), default="INFO")
@util.background
async def main():
    '''
    Test main program for server
    '''
    global continueLoop
    logging.basicConfig(format='%(asctime)s %(levelname)-8s [%(filename)s:%(lineno)4d] %(message)s',
                        datefmt=' %Y-%m-%d:%H:%M:%S', level=LOGGER.getEffectiveLevel())
    signal.signal(signal.SIGINT, sigint_handler)
    
    address = ('::', 8124)
    class HTTPServerV6(httpServer.HTTPServer):
        address_family = socket.AF_INET6
    server = HTTPServerV6(address, HTTPHandler)
    ***begin insert***
    backgroundObject = HTTPServerBackground(server)
    backgroundThread = threading.Thread(target=backgroundObject.background)
    try:
        backgroundThread.start()
    except Exception as e:
        LOGGER.warning(f"Received a {e} exception")
        continueLoop = False
    while continueLoop:
        try:
            time.sleep(1.0)
        except:
            break
    backgroundObject.shutdown()
    response = requests.get('http://localhost:8124/index.html')
    LOGGER.debug(f"got {response}")
    backgroundThread.join()
if __name__ == "__main__":
    asyncio.run(main())
