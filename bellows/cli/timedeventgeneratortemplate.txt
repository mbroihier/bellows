#!/usr/bin/env -S python
import asyncio
import calendar
import logging

import click
import click_log

import json
import time
import sys
import websockets

from bellows.cli import opts
from bellows.cli import util
import timedEventUtilities
from timedEventUtilities import generalTimeUtilities

LOGGER = logging.getLogger(__name__)
debug = logging.DEBUG == LOGGER.getEffectiveLevel()
debugTimeDelta = 0

@click.command()
@click_log.simple_verbosity_option(logging.getLogger(), default="INFO")
@util.background
async def timedEventGenerator():
    ''' Time Server '''
    global debug
    global debugTimeDelta
    logging.basicConfig(format='%(asctime)s %(levelname)-8s [%(filename)s:%(lineno)4d] %(message)s',
                        datefmt=' %Y-%m-%d:%H:%M:%S', level=LOGGER.getEffectiveLevel())
    te = timedEventUtilities.timedEvent(debug)
    debug = logging.DEBUG == LOGGER.getEffectiveLevel()
    debugTimeDelta = 10.0
    gtu = generalTimeUtilities(debug, debugTimeDelta, time.time())
    # buildTools creates this initially - edit times to the desired values
    # ***begin insert***
    # end of the information inserted by buildTools
    # based on current time, update deviceUpdateTimes, and time line index
    currentTime = gtu.getTime()
    currentTimeStructure = time.gmtime(currentTime)
    for device in deviceTLIndex:
        for k, v in deviceTLIndex[device].items():
            if len(deviceTL[device][k][device]) > 0:
                minTime = te.nextEvent(currentTime, deviceTL[device][k][device][0], k)
                rememberIndex = 0
                for index in range(len(deviceTL[device][k][device])):
                    if index == 0:
                        next
                    deviceUpdateTimes[device][k] = te.nextEvent(currentTime, deviceTL[device][k][device][index], k)
                    if deviceUpdateTimes[device][k] < minTime:
                        minTime = deviceUpdateTimes[device][k]
                        rememberIndex = index
                deviceTLIndex[device][k] = rememberIndex
                deviceUpdateTimes[device][k] = minTime
    for device in deviceTLIndex:
        LOGGER.info(f"Time line device: {device}")
        for k, v in deviceTLIndex[device].items():
            LOGGER.info(f"Time line index - {k}: {v}")
    lastUpdateTime = []
    for device in deviceUpdateTimes:
        LOGGER.info(f"Time of first update - device: {device}")
        for k, v in deviceUpdateTimes[device].items():
            if v != 0:
                LOGGER.info(f"Time of first update - {k}: {time.strftime('%d %b %Y %H:%M:%S',time.gmtime(v))}")
                lastUpdateTime.append(v)

    if debug:
        testCSVFile = open("testOutput.csv", "w", encoding="utf-8")
        for device in deviceUpdateTimes:
            testCSVFile.write("Current Time,")
            for k, v in deviceUpdateTimes[device].items():
                if v != 0:
                    testCSVFile.write(f"{k},")
        testCSVFile.write("\n")
        for device in deviceUpdateTimes:
            testCSVFile.write(f" {time.strftime('%d %b %Y %H:%M:%S',time.gmtime(currentTime))},")
            for k, v in deviceUpdateTimes[device].items():
                if v != 0:
                    testCSVFile.write(f"{v},")
        testCSVFile.write("\n")
        testCSVFile.close()
    while True:
        if not debug:
            await asyncio.sleep(1.0)
        currentTime = gtu.getTime()
        for device in deviceUpdateTimes:
            for k, v in deviceUpdateTimes[device].items():
                if (currentTime >= v) and (v > 0):
                    if "On" in k:
                        command = "on"
                    else:
                        command = "off"
                    if not debug:
                        try:
                            async with websockets.connect("ws://localhost:8126") as socket:
                                await socket.send("time server connection request")
                                message = await asyncio.wait_for(socket.recv(), timeout=1.0)
                                LOGGER.info(f"received initial/connection status of: {message}")
                                LOGGER.info(f"device: {device}, command: {command}")
                                if json.loads(message)[device] == command:
                                    LOGGER.warning(f"{json.loads(message)[device]} matches commanded state")
                                else:
                                    await socket.send(device+command)
                                    message = await asyncio.wait_for(socket.recv(), timeout=5.0)
                                    LOGGER.info(f"received final status of: {message}")
                        except TimeoutError as e:
                            LOGGER.error("TimeoutError while receiving status")
                        except Exception as e:
                            LOGGER.error(f"Exception detected {e}, terminating")
                            sys.exit(-1)
                    index = deviceTLIndex[device][k]
                    index = (index + 1) % len(deviceTL[device][k][device])  # go to the next index of the day
                    deviceUpdateTimes[device][k] = te.nextEvent(currentTime, deviceTL[device][k][device][index], k)
                    deviceTLIndex[device][k] = index
                    LOGGER.info(f"Time of next update - device {device}, {k}, index: {index}, "
                                 f" {time.strftime('%d %b %Y %H:%M:%S',time.gmtime(deviceUpdateTimes[device][k]))}")
                    if debug:
                        lutIndex = 0
                        testCSVFile = open("testOutput.csv", "a", encoding="utf-8")
                        for device in deviceUpdateTimes:
                            testCSVFile.write(f" {time.strftime('%d %b %Y %H:%M:%S',time.gmtime(currentTime))},")
                            for k, v in deviceUpdateTimes[device].items():
                                if v != 0:
                                    testCSVFile.write(f"{v},")
                                    lastUpdateTime[lutIndex] = v
                                    lutIndex += 1
                        testCSVFile.write("\n")
                        testCSVFile.close()
    
if __name__ == "__main__":
    asyncio.run(timedEventGenerator())

